//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ProjectsManagementEntities : DbContext
    {
        public ProjectsManagementEntities()
            : base("name=ProjectsManagementEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TAssistant> TAssistant { get; set; }
        public virtual DbSet<TAssistantHours> TAssistantHours { get; set; }
        public virtual DbSet<TAssistantToProject> TAssistantToProject { get; set; }
        public virtual DbSet<TAssToManager> TAssToManager { get; set; }
        public virtual DbSet<TDestinationGroup> TDestinationGroup { get; set; }
        public virtual DbSet<TDestinationType> TDestinationType { get; set; }
        public virtual DbSet<TDocument> TDocument { get; set; }
        public virtual DbSet<TDocumentType> TDocumentType { get; set; }
        public virtual DbSet<TGrade> TGrade { get; set; }
        public virtual DbSet<TMessage> TMessage { get; set; }
        public virtual DbSet<TPermission> TPermission { get; set; }
        public virtual DbSet<TProject> TProject { get; set; }
        public virtual DbSet<TSchool> TSchool { get; set; }
        public virtual DbSet<TStatus> TStatus { get; set; }
        public virtual DbSet<TStudent> TStudent { get; set; }
        public virtual DbSet<TTechnology> TTechnology { get; set; }
        public virtual DbSet<TTechnologyToAss> TTechnologyToAss { get; set; }
        public virtual DbSet<TUser> TUser { get; set; }
    
        public virtual ObjectResult<ass_by_manager_Result> ass_by_manager(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ass_by_manager_Result>("ass_by_manager", idParameter);
        }
    }
}
